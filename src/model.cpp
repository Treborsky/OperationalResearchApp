//
// Created by Robert Koziarski on 14.11.2021.
//

#include "model.h"

// Allocates memory and loads data from the .json file passed into the constructor
// Assumes a file format equivalent to the one generated from data_gen.py script included in the package
Model::Model(const std::string& file_path) {
#ifdef USING_INLINE_FILE
    json json_file = R"({"n": 20,"m": 150,"money": 1000,"prices": [5, 26, 16, 13, 17, 8, 29, 26, 26, 26, 8, 5, 21, 15, 20, 25, 5, 29, 29, 24, 9, 22, 15, 18, 13, 8, 15, 13, 9, 26, 8, 13, 20, 10, 20, 26, 8, 12, 20, 5, 17, 24, 7, 21, 6, 26, 5, 27, 22, 21, 11, 23, 9, 14, 9, 21, 5, 13, 28, 8, 18, 27, 5, 5, 26, 11, 21, 11, 17, 26, 19, 26, 11, 22, 18, 20, 29, 9, 6, 25, 22, 19, 19, 10, 27, 19, 19, 11, 5, 26, 11, 20, 16, 21, 21, 27, 14, 23, 5, 9, 26, 19, 18, 20, 11, 6, 13, 11, 26, 15, 6, 13, 9, 24, 9, 6, 25, 16, 8, 21, 23, 17, 19, 29, 6, 11, 12, 12, 7, 28, 22, 12, 25, 24, 27, 9, 14, 12, 7, 27, 12, 17, 23, 18, 10, 19, 13, 8, 16, 15],"quantities": [300, 200, 200, 400, 200, 100, 400, 400, 100, 100, 400, 400, 300, 100, 300, 300, 300, 300, 100, 300, 400, 400, 100, 300, 200, 100, 100, 200, 200, 200, 300, 300, 300, 200, 400, 100, 100, 100, 200, 400, 200, 400, 200, 100, 300, 300, 100, 300, 200, 200, 200, 100, 100, 400, 100, 200, 400, 100, 100, 200, 300, 300, 100, 300, 300, 200, 300, 300, 100, 400, 400, 300, 200, 300, 200, 300, 300, 400, 200, 400, 200, 300, 300, 300, 300, 300, 400, 400, 400, 400, 100, 100, 200, 400, 100, 300, 100, 200, 300, 200, 300, 300, 200, 400, 400, 300, 100, 200, 100, 200, 400, 400, 200, 200, 200, 200, 300, 400, 200, 300, 400, 300, 200, 400, 300, 100, 100, 400, 100, 400, 100, 200, 400, 300, 300, 200, 200, 200, 100, 300, 100, 400, 400, 400, 200, 300, 400, 100, 300, 300],"dates": [3, 3, 4, 6, 6, 4, 5, 5, 3, 4, 6, 6, 4, 1, 5, 5, 4, 5, 1, 4, 2, 3, 4, 1, 1, 6, 2, 1, 3, 3, 6, 5, 4, 3, 1, 1, 3, 6, 6, 1, 4, 3, 6, 2, 4, 1, 4, 6, 3, 6, 1, 1, 5, 3, 1, 1, 3, 4, 1, 4, 4, 5, 4, 2, 4, 4, 5, 3, 5, 6, 5, 1, 4, 2, 6, 1, 3, 1, 5, 1, 5, 2, 2, 1, 1, 5, 6, 3, 3, 3, 4, 5, 4, 1, 5, 4, 4, 6, 3, 1, 2, 2, 4, 1, 6, 2, 2, 6, 5, 3, 3, 2, 1, 1, 1, 2, 3, 6, 3, 6, 3, 4, 4, 4, 1, 2, 1, 2, 2, 3, 5, 1, 5, 5, 4, 1, 6, 2, 4, 6, 6, 5, 5, 1, 3, 5, 5, 2, 3, 6],"recipes": [[124, 121, 193, 103, 110, 197, 170, 186, 170, 181, 134, 186, 103, 134, 189, 175, 105, 151, 103, 103, 152, 139, 146, 124, 199, 193, 138, 103, 117, 165, 155, 116, 131, 108, 143, 132, 155, 171, 144, 164, 124, 121, 199, 126, 116, 149, 115, 169, 143, 165, 190, 180, 184, 131, 178, 140, 197, 111, 198, 111, 136, 167, 161, 103, 188, 162, 123, 143, 103, 157, 169, 119, 195, 142, 154, 126, 123, 197, 131, 183, 191, 134, 168, 147, 103, 172, 143, 164, 112, 103, 196, 163, 148, 195, 136, 122, 149, 117, 186, 108, 104, 185, 166, 100, 197, 110, 151, 163, 184, 135, 185, 186, 113, 114, 142, 172, 130, 193, 110, 175, 118, 156, 123, 144, 184, 136, 150, 170, 119, 140, 185, 172, 199, 164, 108, 134, 123, 155, 176, 124, 199, 193, 147, 153, 120, 112, 102, 110, 143, 102], [110, 124, 196, 173, 199, 110, 157, 108, 192, 121, 147, 167, 145, 142, 155, 183, 171, 166, 157, 177, 100, 125, 121, 196, 156, 106, 121, 141, 193, 185, 110, 195, 186, 180, 178, 141, 158, 140, 163, 193, 153, 113, 199, 154, 120, 126, 129, 166, 196, 142, 103, 195, 155, 139, 163, 152, 135, 199, 177, 109, 195, 116, 182, 193, 185, 184, 111, 116, 145, 159, 131, 100, 188, 123, 102, 147, 173, 192, 154, 139, 191, 199, 114, 161, 195, 198, 188, 118, 178, 192, 130, 183, 158, 195, 158, 154, 140, 123, 188, 188, 191, 166, 171, 119, 103, 141, 170, 163, 122, 188, 194, 126, 158, 160, 128, 162, 110, 190, 173, 187, 163, 191, 106, 183, 121, 152, 193, 180, 173, 172, 162, 115, 156, 150, 184, 138, 133, 183, 175, 138, 151, 154, 169, 131, 178, 117, 154, 144, 109, 166], [103, 183, 159, 196, 110, 116, 114, 127, 106, 179, 163, 150, 109, 136, 134, 168, 192, 125, 164, 173, 183, 136, 125, 146, 180, 197, 139, 168, 194, 179, 137, 106, 143, 147, 120, 161, 113, 174, 117, 160, 146, 136, 127, 120, 117, 114, 149, 192, 100, 108, 115, 129, 143, 110, 158, 123, 112, 120, 142, 107, 120, 116, 131, 168, 194, 198, 196, 188, 124, 173, 159, 104, 163, 102, 199, 113, 143, 147, 153, 183, 167, 158, 120, 137, 102, 170, 164, 194, 155, 198, 168, 149, 152, 100, 153, 152, 193, 139, 194, 111, 106, 176, 120, 146, 184, 103, 169, 174, 174, 171, 144, 153, 140, 167, 173, 116, 122, 183, 152, 159, 194, 189, 177, 131, 161, 103, 174, 188, 121, 159, 119, 115, 103, 138, 126, 143, 191, 182, 183, 112, 159, 135, 135, 149, 164, 102, 105, 161, 196, 199], [130, 180, 123, 193, 192, 128, 111, 125, 115, 119, 158, 113, 115, 104, 189, 185, 140, 148, 139, 151, 143, 153, 190, 142, 152, 182, 187, 142, 144, 173, 151, 181, 118, 160, 168, 115, 117, 155, 149, 136, 167, 153, 132, 167, 171, 151, 139, 168, 129, 171, 174, 142, 109, 101, 122, 105, 185, 137, 186, 147, 145, 175, 101, 176, 171, 152, 194, 190, 171, 130, 181, 198, 188, 177, 101, 152, 109, 154, 138, 101, 171, 158, 127, 188, 199, 163, 155, 112, 197, 198, 152, 170, 178, 198, 105, 112, 181, 140, 157, 165, 181, 199, 176, 177, 177, 164, 164, 164, 144, 175, 106, 117, 182, 190, 141, 118, 176, 191, 172, 119, 175, 183, 172, 112, 190, 143, 108, 105, 116, 135, 121, 120, 144, 162, 163, 125, 103, 122, 154, 113, 163, 155, 164, 104, 126, 160, 161, 130, 134, 122], [199, 136, 196, 199, 195, 151, 125, 181, 166, 113, 130, 165, 101, 111, 173, 104, 125, 194, 159, 112, 184, 174, 164, 190, 172, 186, 189, 112, 195, 136, 192, 122, 173, 191, 171, 197, 143, 186, 137, 128, 189, 145, 154, 154, 121, 155, 183, 115, 193, 129, 170, 188, 138, 192, 194, 128, 197, 124, 103, 120, 112, 155, 141, 132, 117, 160, 143, 178, 139, 103, 101, 127, 157, 162, 139, 124, 133, 111, 116, 112, 115, 192, 149, 148, 154, 125, 108, 111, 112, 128, 187, 174, 145, 100, 146, 156, 159, 138, 191, 130, 115, 151, 184, 169, 132, 187, 180, 157, 169, 160, 160, 193, 196, 162, 187, 102, 180, 103, 141, 148, 144, 153, 101, 111, 169, 124, 192, 150, 196, 186, 161, 136, 118, 123, 141, 122, 148, 144, 120, 150, 117, 148, 167, 131, 120, 197, 134, 147, 167, 195], [117, 199, 128, 100, 106, 166, 152, 163, 146, 131, 186, 112, 162, 137, 188, 114, 107, 167, 162, 118, 122, 105, 147, 135, 120, 163, 129, 108, 143, 178, 134, 147, 186, 135, 147, 169, 132, 189, 101, 139, 174, 160, 163, 176, 140, 169, 109, 115, 111, 178, 182, 129, 101, 195, 192, 135, 134, 180, 154, 159, 170, 194, 114, 185, 127, 173, 124, 170, 135, 162, 109, 104, 189, 195, 190, 116, 174, 183, 166, 160, 168, 147, 113, 106, 194, 186, 163, 165, 126, 160, 170, 153, 113, 104, 127, 121, 144, 161, 116, 167, 116, 156, 161, 128, 198, 113, 112, 168, 147, 193, 134, 140, 127, 133, 156, 123, 119, 171, 126, 117, 198, 173, 166, 129, 184, 133, 149, 171, 151, 173, 167, 106, 152, 126, 136, 138, 118, 161, 139, 105, 133, 105, 118, 145, 115, 175, 131, 180, 198, 165], [195, 104, 197, 150, 165, 131, 126, 197, 118, 148, 195, 108, 146, 172, 140, 169, 144, 146, 159, 158, 110, 159, 141, 125, 138, 171, 112, 119, 153, 148, 175, 193, 151, 161, 115, 149, 199, 114, 197, 102, 197, 163, 110, 131, 172, 121, 182, 122, 189, 153, 178, 133, 145, 137, 175, 113, 102, 184, 103, 156, 105, 159, 130, 182, 156, 168, 125, 189, 140, 128, 110, 124, 118, 191, 165, 100, 114, 107, 108, 102, 185, 139, 108, 101, 158, 190, 116, 118, 102, 199, 125, 141, 163, 127, 190, 110, 123, 105, 190, 158, 184, 151, 178, 135, 105, 110, 169, 155, 143, 113, 172, 183, 187, 136, 148, 188, 168, 145, 164, 181, 119, 172, 152, 127, 116, 144, 177, 114, 130, 124, 119, 149, 170, 122, 130, 112, 155, 153, 100, 119, 118, 175, 108, 182, 152, 169, 116, 166, 126, 142], [115, 155, 112, 196, 184, 179, 187, 164, 143, 113, 163, 143, 193, 172, 123, 164, 127, 157, 175, 114, 142, 112, 100, 181, 188, 103, 110, 182, 132, 146, 177, 142, 199, 155, 124, 187, 135, 158, 133, 138, 102, 166, 112, 132, 101, 128, 158, 157, 112, 127, 186, 168, 128, 121, 144, 124, 168, 110, 126, 173, 157, 101, 175, 148, 158, 163, 109, 116, 166, 102, 168, 138, 157, 170, 173, 182, 145, 137, 155, 140, 119, 191, 116, 146, 199, 115, 180, 119, 159, 110, 168, 166, 138, 120, 120, 107, 165, 180, 133, 117, 112, 142, 185, 176, 185, 150, 132, 150, 138, 168, 158, 146, 176, 168, 183, 136, 135, 105, 169, 157, 181, 163, 187, 179, 131, 152, 189, 146, 120, 135, 188, 106, 102, 197, 131, 140, 121, 130, 166, 145, 169, 193, 135, 148, 168, 191, 142, 194, 180, 168], [197, 109, 138, 139, 118, 191, 195, 134, 158, 120, 162, 110, 161, 152, 175, 139, 182, 100, 136, 165, 113, 149, 145, 178, 175, 147, 167, 151, 131, 103, 135, 194, 175, 190, 151, 195, 153, 117, 110, 146, 146, 147, 113, 106, 192, 171, 154, 170, 102, 167, 168, 165, 137, 171, 198, 108, 122, 159, 109, 154, 121, 198, 118, 187, 104, 123, 163, 153, 144, 127, 104, 153, 155, 181, 154, 165, 102, 115, 139, 114, 127, 111, 133, 118, 154, 178, 164, 133, 186, 101, 168, 151, 139, 107, 183, 193, 144, 197, 192, 175, 104, 178, 102, 157, 104, 165, 122, 188, 130, 120, 156, 121, 185, 113, 120, 112, 166, 113, 166, 144, 124, 115, 160, 171, 114, 162, 152, 176, 170, 130, 188, 199, 105, 146, 181, 143, 116, 149, 188, 173, 156, 120, 187, 102, 162, 133, 115, 100, 160, 167], [147, 116, 150, 176, 191, 186, 134, 105, 151, 138, 169, 166, 151, 139, 121, 161, 115, 147, 188, 130, 112, 102, 120, 177, 145, 178, 115, 149, 110, 183, 127, 181, 163, 136, 176, 191, 175, 179, 135, 109, 144, 145, 146, 194, 120, 104, 180, 101, 117, 129, 121, 171, 187, 195, 162, 172, 124, 168, 191, 171, 159, 135, 112, 114, 115, 168, 113, 153, 101, 150, 163, 112, 176, 116, 132, 176, 166, 173, 117, 122, 149, 103, 180, 120, 128, 153, 148, 169, 142, 178, 154, 153, 194, 151, 124, 148, 107, 171, 173, 155, 108, 130, 184, 141, 135, 156, 133, 130, 133, 128, 117, 130, 145, 138, 171, 175, 173, 183, 122, 150, 168, 158, 199, 107, 108, 197, 126, 127, 158, 138, 166, 122, 145, 172, 110, 156, 196, 161, 141, 173, 191, 149, 144, 168, 106, 102, 111, 188, 184, 149], [111, 172, 121, 150, 112, 196, 141, 110, 159, 126, 188, 150, 188, 189, 182, 149, 149, 134, 177, 160, 189, 171, 156, 118, 144, 164, 162, 170, 168, 161, 183, 110, 184, 103, 170, 157, 172, 118, 161, 165, 131, 125, 163, 175, 128, 146, 115, 111, 187, 177, 137, 179, 113, 109, 132, 181, 149, 139, 130, 186, 134, 153, 182, 196, 197, 136, 134, 175, 183, 174, 198, 129, 177, 197, 129, 160, 143, 169, 145, 107, 154, 151, 187, 152, 102, 158, 134, 194, 138, 127, 132, 178, 127, 129, 168, 112, 144, 164, 110, 176, 180, 119, 137, 191, 122, 127, 162, 154, 197, 148, 133, 157, 114, 199, 138, 110, 150, 127, 104, 178, 110, 105, 170, 107, 151, 102, 174, 110, 160, 181, 106, 179, 181, 185, 192, 106, 152, 118, 156, 177, 178, 153, 168, 133, 177, 159, 143, 179, 178, 118], [149, 153, 141, 188, 176, 183, 114, 164, 117, 131, 183, 153, 135, 133, 178, 187, 142, 169, 128, 127, 117, 126, 169, 169, 190, 113, 168, 185, 155, 199, 196, 114, 194, 168, 196, 118, 127, 124, 168, 195, 146, 116, 153, 171, 192, 112, 164, 122, 132, 104, 108, 148, 193, 100, 137, 179, 185, 188, 131, 184, 153, 112, 160, 136, 185, 181, 189, 133, 155, 115, 191, 174, 187, 155, 196, 128, 190, 184, 105, 194, 178, 122, 165, 186, 108, 193, 139, 187, 129, 144, 105, 120, 109, 139, 167, 181, 104, 171, 128, 190, 168, 130, 124, 138, 144, 165, 104, 119, 194, 197, 100, 183, 133, 172, 148, 125, 149, 193, 145, 166, 160, 145, 143, 131, 173, 104, 170, 143, 102, 102, 129, 101, 109, 149, 179, 103, 195, 139, 157, 112, 159, 126, 137, 120, 130, 145, 189, 124, 162, 179], [189, 124, 165, 152, 122, 174, 112, 110, 179, 145, 195, 135, 162, 161, 134, 149, 192, 138, 103, 109, 195, 134, 106, 152, 199, 170, 153, 115, 191, 142, 188, 177, 141, 122, 109, 193, 187, 152, 106, 111, 153, 117, 108, 146, 160, 153, 142, 107, 150, 193, 102, 115, 110, 118, 191, 177, 199, 165, 110, 140, 150, 152, 110, 122, 170, 127, 172, 162, 141, 104, 158, 107, 122, 148, 195, 151, 157, 197, 160, 106, 165, 101, 127, 158, 125, 137, 146, 182, 191, 129, 199, 100, 159, 189, 131, 128, 119, 143, 104, 120, 155, 107, 136, 102, 178, 104, 113, 140, 117, 174, 124, 136, 195, 177, 110, 137, 147, 176, 110, 193, 194, 186, 157, 105, 195, 153, 118, 108, 150, 149, 113, 188, 194, 106, 178, 165, 185, 137, 183, 183, 162, 179, 113, 178, 175, 177, 127, 159, 109, 160], [126, 123, 145, 184, 138, 124, 174, 136, 146, 144, 128, 185, 196, 153, 120, 191, 104, 163, 185, 141, 180, 126, 157, 132, 199, 198, 184, 170, 120, 116, 170, 183, 141, 113, 188, 175, 177, 143, 161, 177, 158, 138, 116, 155, 155, 196, 106, 193, 132, 138, 157, 172, 190, 128, 164, 161, 167, 169, 157, 148, 139, 169, 183, 193, 172, 162, 172, 162, 127, 116, 188, 102, 183, 189, 163, 121, 119, 156, 147, 160, 162, 167, 130, 100, 197, 176, 124, 158, 176, 108, 124, 172, 188, 107, 181, 198, 179, 180, 118, 135, 189, 162, 107, 161, 144, 154, 147, 199, 196, 103, 152, 181, 110, 112, 147, 130, 106, 145, 198, 180, 108, 112, 103, 112, 123, 198, 132, 155, 126, 196, 100, 179, 130, 128, 170, 104, 151, 190, 144, 195, 153, 111, 181, 156, 134, 145, 155, 121, 184, 198], [144, 156, 116, 150, 185, 167, 123, 196, 108, 196, 183, 185, 177, 191, 122, 189, 103, 120, 191, 179, 168, 187, 109, 189, 167, 170, 145, 177, 100, 127, 114, 122, 151, 161, 154, 106, 174, 187, 117, 117, 182, 117, 160, 163, 144, 156, 178, 137, 132, 179, 130, 171, 161, 118, 147, 122, 139, 105, 172, 182, 140, 111, 199, 124, 101, 153, 140, 187, 102, 153, 110, 193, 164, 183, 162, 112, 114, 123, 122, 105, 184, 117, 171, 106, 159, 197, 160, 141, 113, 186, 112, 123, 126, 131, 134, 187, 107, 168, 131, 187, 163, 171, 167, 172, 140, 195, 166, 108, 181, 194, 125, 108, 182, 172, 136, 118, 150, 147, 197, 161, 139, 187, 170, 155, 137, 171, 143, 170, 178, 170, 190, 121, 112, 172, 142, 186, 163, 191, 163, 139, 170, 108, 160, 106, 118, 164, 176, 190, 167, 128], [187, 196, 134, 136, 184, 102, 127, 125, 154, 110, 151, 110, 141, 100, 104, 153, 141, 199, 174, 178, 189, 136, 147, 124, 129, 185, 168, 152, 117, 181, 111, 184, 168, 111, 166, 107, 177, 102, 149, 192, 126, 122, 161, 133, 109, 121, 149, 126, 123, 192, 134, 193, 196, 126, 141, 137, 191, 113, 146, 188, 112, 157, 160, 197, 146, 165, 134, 128, 109, 107, 100, 173, 136, 183, 188, 149, 101, 125, 104, 187, 104, 116, 151, 127, 108, 167, 150, 195, 118, 132, 129, 127, 145, 147, 179, 124, 107, 161, 128, 154, 166, 170, 177, 179, 189, 141, 164, 107, 146, 112, 163, 148, 126, 107, 136, 197, 151, 194, 123, 105, 107, 109, 197, 142, 121, 142, 178, 186, 105, 108, 163, 160, 189, 165, 165, 196, 117, 107, 192, 171, 192, 110, 150, 114, 196, 166, 171, 171, 129, 102], [195, 105, 122, 150, 149, 143, 184, 174, 119, 191, 178, 121, 192, 148, 157, 181, 196, 101, 170, 193, 100, 171, 110, 158, 144, 115, 192, 124, 174, 141, 127, 103, 136, 137, 125, 122, 170, 197, 179, 180, 145, 161, 120, 142, 142, 192, 120, 101, 191, 198, 173, 143, 154, 180, 163, 176, 114, 125, 190, 190, 114, 174, 111, 181, 187, 189, 192, 158, 199, 136, 199, 149, 185, 144, 164, 139, 103, 155, 156, 190, 142, 184, 108, 185, 172, 102, 137, 182, 113, 190, 117, 195, 179, 177, 140, 137, 127, 188, 147, 165, 170, 146, 148, 125, 191, 104, 197, 122, 175, 136, 127, 100, 121, 111, 166, 106, 129, 103, 139, 145, 193, 140, 154, 108, 165, 171, 108, 107, 159, 131, 107, 173, 157, 145, 124, 192, 171, 132, 177, 194, 104, 126, 123, 179, 113, 105, 187, 165, 176, 129], [188, 132, 118, 178, 153, 107, 105, 111, 191, 190, 110, 124, 110, 172, 133, 123, 188, 146, 184, 106, 149, 133, 198, 172, 169, 111, 166, 173, 133, 147, 112, 173, 105, 139, 161, 189, 192, 104, 165, 114, 160, 132, 107, 167, 197, 175, 101, 198, 151, 149, 153, 167, 159, 199, 170, 168, 191, 113, 194, 198, 128, 119, 180, 174, 155, 135, 127, 162, 192, 115, 153, 151, 105, 101, 120, 146, 168, 145, 179, 145, 112, 104, 137, 159, 198, 143, 173, 130, 182, 168, 190, 157, 193, 191, 180, 195, 189, 178, 185, 170, 147, 108, 143, 154, 112, 153, 107, 101, 194, 108, 137, 143, 108, 151, 113, 104, 165, 199, 140, 136, 140, 183, 169, 145, 131, 156, 124, 136, 188, 175, 192, 154, 186, 162, 198, 165, 129, 191, 171, 193, 140, 143, 132, 140, 143, 153, 150, 143, 110, 172], [148, 178, 114, 147, 136, 100, 121, 197, 130, 100, 150, 194, 131, 192, 149, 125, 179, 144, 167, 185, 186, 198, 136, 191, 112, 179, 193, 120, 109, 147, 138, 137, 177, 115, 189, 128, 151, 114, 184, 126, 112, 130, 108, 173, 142, 124, 134, 130, 119, 118, 125, 129, 184, 198, 186, 148, 128, 122, 196, 183, 118, 116, 170, 153, 196, 101, 119, 182, 161, 158, 145, 160, 144, 151, 106, 150, 197, 176, 135, 122, 164, 182, 128, 157, 111, 178, 195, 136, 188, 186, 184, 112, 175, 108, 101, 101, 172, 192, 180, 126, 118, 195, 123, 181, 143, 120, 169, 115, 167, 105, 157, 181, 163, 184, 134, 138, 176, 109, 195, 182, 113, 129, 106, 166, 193, 145, 170, 185, 165, 160, 112, 158, 150, 156, 131, 188, 155, 128, 199, 121, 126, 127, 137, 145, 196, 173, 176, 165, 132, 152], [134, 145, 119, 199, 167, 195, 198, 146, 122, 117, 182, 177, 152, 164, 192, 185, 143, 158, 147, 122, 148, 131, 182, 167, 108, 158, 192, 186, 163, 116, 101, 194, 108, 106, 165, 133, 157, 121, 146, 189, 135, 182, 124, 134, 124, 140, 148, 182, 171, 179, 129, 185, 123, 178, 172, 166, 102, 147, 102, 115, 160, 121, 119, 157, 156, 166, 150, 152, 149, 149, 178, 180, 112, 121, 155, 134, 199, 124, 168, 120, 184, 147, 167, 147, 134, 129, 194, 161, 145, 161, 144, 145, 163, 117, 119, 148, 184, 187, 146, 193, 100, 194, 136, 140, 199, 141, 193, 190, 162, 113, 106, 169, 198, 122, 129, 144, 128, 124, 137, 126, 118, 185, 134, 106, 148, 163, 161, 162, 139, 152, 132, 108, 162, 128, 138, 189, 112, 180, 143, 128, 117, 108, 121, 178, 137, 186, 165, 145, 191, 189]],"times": [25, 8, 20, 13, 16, 19, 17, 25, 18, 10, 25, 22, 23, 6, 19, 22, 29, 25, 29, 12]})"_json;
#else
    std::ifstream i(file_path);
    json json_file;
    i << json_file;
#endif

    m_n = json_file["n"];
    m_m = json_file["m"];

    today = 1;
    money = json_file["money"];
    m_R = json_file["recipes"].get<std::vector<std::vector<int>>>();
    m_T = json_file["times"].get<std::vector<int>>();
    m_Q = json_file["quantities"].get<std::vector<int>>();
    m_E = json_file["dates"].get<std::vector<int>>();
    m_P = json_file["prices"].get<std::vector<int>>();

    params = CostFunctionParams(1.0, 1.0, 1.0);

    std::random_device dev;
    rng = std::mt19937(dev());
    dist = std::uniform_int_distribution<> (0, m_n-1);
}

void Model::set_params(double a, double b, double g) {
    params = CostFunctionParams(a, b, g);
}

inline bool Model::determineIsProductExpired(int product_idx) const {
    return m_T[product_idx] < today;
}

const double Model::calculateCostFunction(const std::vector<bool>& x) const {
    double cost_shop = 0;
    double cost_loss = 0;
    double cost_time = 0;

    for (int j = 0; j < m_n; ++j) {
        if (!x[j]) continue;
        const auto& recipe = m_R[j];
        cost_time += m_T[j];
        for (int i = 0; i < m_m; ++i) {
            // update shop cost
            cost_shop += (double) m_P[i] * MAX(0, m_Q[i] - recipe[j]);
            // update loss cost
            cost_loss += (double) m_P[i] * determineIsProductExpired(i) * MAX(0, recipe[j] - m_Q[i]);
        }
    }

    return params.alpha * cost_shop + params.beta * cost_loss + params.gamma * cost_time;
}

std::pair<double, int> Model::tabooSearch(int max_iterations, NeighborhoodType nbrhd_type,
                                          SolutionSelectionMethod ssm_type, double cutoff, int nbrhd_size) {
    // solution vector size = m_n
    // we need random
    // - bool for solutions (needn't be very fast - only the initial solution utilizes them)
    // - int (MUST be really fast - we decide the moves based on these generated indices)
    if (!m_X.empty()) m_X.clear();
    global_best.first = 0;

    std::vector<bool> s = generateInitial();
    global_best.second = calculateCostFunction(s);

    std::vector<std::vector<bool>> s_nbrhd;

    while (max_iterations--) {
        // generate neighborhood around current solution
        s_nbrhd = generateNewNeighborhood(nbrhd_type, s, nbrhd_size);
    }

    return global_best;
}

std::vector<bool> Model::generateInitial() {
    std::vector<bool> v;
    v.reserve(m_n);
    for (int i = 0; i < m_n; ++i) {
        v.push_back(random_bool());
    }

    m_X.push_back(v);

    return v;
}

// generates a new solution
// @param nbrhd_type - type of neighborhood (actually, type of generator)
// @param s          - solution to base the new solution on
// @returns x        - new solution
std::vector<bool> Model::generateNew(NeighborhoodType nbrhd_type, const std::vector<bool>& s) {    // todo: benchmark
    std::vector<bool> x = s;
    int idx;
    switch (nbrhd_type) {
        case HAM2:case HAM3:case HAM4:
            for (int i = 0; i < (int)nbrhd_type; ++i) { // interpret NeighbourHoodType as (int)
                while (taboo_list.contains(idx)) {
                    idx = rnd_idx();
                }
                x[idx] = !x[idx];
                taboo_list.add(idx, x[idx] ? ZERO_ONE : ONE_ZERO);
            }
            break;
        case RAND:
            for (int i = 0; i < m_n; ++i) { // todo: check if it's correct, because a random vector could acutally break taboo
                x[i] = random_bool();
                if (x[i] != s[i]) { // if a change occurred on ith place in the solution
                    // then we should check if it was taboo
                    if (!taboo_list.contains(i)) {  // if it doesn't, we add it
                        taboo_list.add(idx, x[idx] ? ZERO_ONE : ONE_ZERO);
                    } else { // if it does, then we change it back
                        x[i] = !x[i];
                    }
                }
            }
            break;
    } // here the solution generation should be already completed

    // add x to m_X and return
    m_X.push_back(x);

    return x;
}

// generates neighborhood around solution s
// @param type    - type of neighborhood to be generated
// @param s       - vector to generate the neighborhood around
// @param size    - size of the neighborhood
// @returns nbrhd - a neighborhood of size <size>
std::vector<std::vector<bool>> Model::generateNewNeighborhood(NeighborhoodType type, const std::vector<bool>& s, int size) {
    std::vector<std::vector<bool>> nbrhd;
    for (int i = 0; i < size; ++i) {
        nbrhd.push_back(generateNew(type, s));  // todo: checking for uniqueness -> we could somehow guarantee it in generateNew
    }
    return nbrhd;
}

inline int Model::rnd_idx() {
    return static_cast<int>(dist(rng));
}